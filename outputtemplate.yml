AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Chatbot

  Chatbot demo app

  '
Parameters:
  FrontendDomainName:
    Type: String
    Default: '*'
    Description: The domain name for CORS configuration of the API
Globals:
  Function:
    Timeout: 10
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      Fn::Sub: '''${FrontendDomainName}'''
Resources:
  ChatbotLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: PutMetric
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: LambdaBasicExecution
      - PolicyDocument:
          Statement:
          - Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: XRayAccess
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:CreateNetworkInterface
            - ec2:Describe*
            - ec2:DeleteNetworkInterface
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: EC2Access
  ChatbotFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Events:
        NLPLambdaApi:
          Type: Api
          Properties:
            Path: /chat
            Method: POST
      Role:
        Fn::GetAtt:
        - ChatbotLambdaRole
        - Arn
      VpcConfig:
        SecurityGroupIds:
        - sg-07e38cdd12b5ac928
        SubnetIds:
        - subnet-0bd73860ef9cf7a03
        - subnet-0fcd90e4b8486d4bb
      CodeUri: s3://workflow-1-deployment-artifacts-02/6cdf5b72a9536732e28529c3200fcbd4
Outputs:
  ChatbotFunction:
    Description: Chatbot Function ARN
    Value:
      Fn::GetAtt:
      - ChatbotFunction
      - Arn
